// Adafruit MCP9808 Library - Version: Latest 
#include <Adafruit_MCP9808.h>

// Adafruit seesaw Library - Version: Latest, For soil sensor
#include <Adafruit_Crickit.h>
#include <Adafruit_NeoTrellis.h>
#include <Adafruit_TFTShield18.h>
#include <Adafruit_miniTFTWing.h>
#include <Adafruit_seesaw.h>
#include <seesaw_motor.h>
#include <seesaw_neopixel.h>
#include <seesaw_servo.h>

// RF24 - Version: Latest
#include <RF24.h>
#include <RF24_config.h>
#include <nRF24L01.h>
#include <printf.h>
#include <SPI.h> //for nrf connection
#include <Wire.h>//i2c library

/*
  The beginning of PlantCam!
*/
// Create the MCP9808 temperature sensor object
Adafruit_MCP9808 tempsensor = Adafruit_MCP9808();

//Creates a new seesaw object (?) for the soil and temp sensor. 
Adafruit_seesaw soilsense;
// constants won't change. They're used here to set pin numbers:
//const int buttonPin = 2;    // the number of the pushbutton pin
const int tachPin=2;//fan tach pin
int tachPinValue=0;//initialize the value to 0
int rpms=0;
int fancount=0;
const int ledPin = LED_BUILTIN;      // the number of the LED pin
int reading;
// Variables will change:
int ledState = HIGH;         // the current state of the output pin
int buttonState;             // the current reading from the input pin
int lastButtonState = LOW;   // the previous reading from the input pin

// the following variables are unsigned longs because the time, measured in
// milliseconds, will quickly become a bigger number than can be stored in an int.
unsigned long lastDebounceTime = 0;  // the last time the output pin was toggled
unsigned long debounceDelay = 50;    // the debounce time; increase if the output flickers
//global variables
const int fanPWM=10;//this MUST be pin 10 because I'm using Timer1
int speed=0;


RF24 radio(9, 8);
//Begin Setup.
void setup() {
Serial.begin(9600);
  Serial.println("NA NA NA NA NA NA NA NA PLANTCAM!");
  Serial.println(speed);
  
  attachInterrupt(0, rpm, RISING);
//start nrf radio

radio.begin();
radio.setPALevel(RF24_PA_MAX); //set powerlevel max
radio.setChannel(0x76);
const uint64_t pipes[2] = { 0xF0F0F0F0E1LL, 0xF0F0F0F0D2LL };//same pipe address as on pi
radio.openReadingPipe(1, pipes[0]); //start reading pipe
radio.openWritingPipe(pipes[1]);//start writing pipe?
radio.setAutoAck(true);
radio.enableDynamicPayloads();
radio.powerUp();
Wire.begin();   

//start i2c address
//set up PWM fan
pinMode(fanPWM, OUTPUT);
pinMode(LED_BUILTIN, OUTPUT);
pinMode(tachPin, INPUT);
//pinMode(pushButton, INPUT);//pushbutton setup. Want pull-up so that a push brings it low.
  //Choosing to modify the registers directly because PWM fan needs a 25KHz control signal. Its not possible to get this
  //frequency with standard output functions.
  //Note that doing this automatically changes OCR1A, setting it as an output. We just have to define which pin and how the output changes.
  //The counting sequence is determined by the setting of the waveform generator bits. This determines
  //non-pwm, fast pwm, etc. These are the "WGM" bits.
  //CTC mode=non-PWM!

  //OCRnA==output compare registers. They set the levels that determine how the
  //outputs a & b will be affected. The higher the value, the higher the duty cycle.
  TCCR1A = 0;
  TCCR1B = 0;
  TCNT1 = 0; //reset the timer counter.

  //Want phase and frequency correct mode with ORC1A as top because of the changing TOP value.
  //OCR1A provides a buffer for dynamic values, ICR1 does not. 
  TCCR1A = _BV(COM1A1) | _BV(COM1B1) | _BV(WGM10); //Non-inverting output, WGM mode 9.
  TCCR1B = _BV(WGM13) | _BV(CS10); //Completes WGM mode 9, CS sets prescaler to 1.
  OCR1A = 320; //initialize TOP
  OCR1B = 0; //output.
  //fanLow(1);
}

//This is the function that the interupt calls
void rpm (){ 
  fancount++; 
}

void loop() {
  fancount=0;

    radio.startListening() ;        // start listening forever
   char receivedMessage[1];   // set incmng message for 32 bytes, initialized to 0. 
   char sentMessage[4];
   String processedMessage="high";
  if (radio.available()) { 
    radio.read(receivedMessage, sizeof(receivedMessage));  // read the message and save
    
    
    for(int i = 0; i < sizeof(receivedMessage); i++)//looping through the array, so
    //I know its still an array. println automatically converts chars to ascii string
{
  
  processedMessage+=receivedMessage[i];
  
  
}
Serial.println(processedMessage);
  
    //what format do I want the message to come in? Does it matter? 
    //start with integers and go from there? 1=low, 2=med, 3=high. 
    if (processedMessage=="low"){
      fanOut(1);
      
    }
    else if(processedMessage=="med"){
      fanOut(2);
    }
    else if (processedMessage=="soil"){
      testThatPlant();
    }
    
  }
//air temp sensor and soil sensor use i2c. Connect in parallel with 4.7K ohm resistor inbetween 
//for pullup.Can use the same pins but then need each device to have different addressing.

if (processedMessage=="high"){
      fanOut(2);
      sei();
 
//Wait 1 second
delay (1000);
 
//Disable interrupts
cli();

rpms=(fancount/2)*60;
Serial.println(rpms);
    }
    //Enables interrupts
    
//Serial.println(rpms);

}
    
void testThatPlant(){//void functions return nothing. Int functions return a #
  //Using Adafruit's seesaw library to read the temperature sensor.
  
float tempC = soilsense.getTemp();
  uint16_t capread = soilsense.touchRead(0);
  Serial.print("Temperature: "); Serial.print(tempC); Serial.println("*C");
  Serial.print("Capacitive: "); Serial.println(capread);
  delay(4000);//remember that delay uses timer0?
  //return tempC, capread;
}
void fanOff(int speed){
  fanOut(0);
}

void fanLow(int speed) {
  fanOut(1);
  digitalWrite(LED_BUILTIN, HIGH);
  Serial.println("here");
}

void fanMed(int speed) {
  fanOut(2);
  digitalWrite(LED_BUILTIN, HIGH);
}

void fanHigh(int speed) {
   digitalWrite(LED_BUILTIN, HIGH);
  fanOut(3);
//calling fanHigh(8, 320)? This doesn't make sense. Either do it in the function
//or pass high, med, low to the fanout function. 
//and if there is only one pin out option, just do it in the function? 
/*
but I want a fan out=med, high, low. Pin is set, change fanout to define the fan speeds. 
can just call fanOut(HIGH), instead of fanSpeed. 
*/
}


void fanOut(int speed) { //controls the speed of the fan. Plan is to take input from user over the web and enter it here. Will need
  //to find a way to do this.
  int maxSpeed=320; //the max value of the OCR1A
  //int value; /  /value=255/
  switch (speed) {
    
    case 1:
      OCR1B=maxSpeed/2;
      //Serial.println(OCR1B);
      break;
      
    case 2:
      OCR1B=maxSpeed-1;
      //Serial.println(OCR1B);
      //digitalWrite(LED_BUILTIN, HIGH);
      break;
    
    default:
      //do nothing
      break;
  }

  //next need temp sensing, moisture sensing, connection/communucation with NRFL and somehow with PI.
  //temp sensing in the void loop
  //have to remember that the arduino is a slave to the pi. Also have to remember that right now I'm just getting stuff set up. This
  //can be modified later.

  /* Modification ideas:
    Can the arduino power all the devices at the same time?
    How will I power the fan(s) since they need 12V?
        A great project to design my own 12V power supply!! Definitely should do this.
    Arduino is slave:
    need a start-up function
      Start up all devices and perform system checks
    need a reset function
      shut down and restart all devices and perform system checks. Can loop back to start-up function
    need ways to call check temp, check moisture, monitor fan(s).
      Their own loops? Instead of in loop, should maybe have void moisture check(){}?
  */

  //NRFL

}
